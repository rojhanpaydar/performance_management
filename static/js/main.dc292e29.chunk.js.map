{"version":3,"sources":["Cards.js","Nav.js","LeftSideBar.js","Filters.js","Charts.js","App.js","serviceWorker.js","index.js"],"names":["Cards","props","state","series","options","chart","type","className","class","data","gaugeData","map","cardData","ReactApexCharts","document","querySelector","name","xaxis","categories","render","score","vsly","sample","Component","Nav","LeftSideBar","Filters","Charts","App","areaData","console","log","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uhEAmEeA,E,kDA3DX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,OAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,IACzBC,QAAS,CACLC,MAAO,CACHC,KAAM,WANH,E,qDAgBf,OAEI,yBAAKC,UAAU,WACX,wBAAIA,UAAU,gBACV,yBAAKC,MAAM,QAEHC,EAAKC,UAAUC,KAAI,SAACC,GAoBhB,OALgB,IAAIC,IAAgBC,SAASC,cAAc,UAbzC,CACVV,MAAO,CACHC,KAAM,SAEVH,OAAQ,CAAC,CACLa,KAAM,QACNP,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,OAE3CQ,MAAO,CACHC,WAAY,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,SAM/DC,SAIN,4BACKP,EAASI,KACTJ,EAASQ,MACTR,EAASS,KACTT,EAASU,kB,GAhD9BC,aCeLC,E,uKAlBP,OACI,6BACI,6BACI,wBAAIjB,UAAU,oBACV,+CACA,yDACA,4BAAI,gCAAQ,uBAAGC,MAAM,uBACrB,4BAAI,gCAAQ,uBAAGA,MAAM,sBACrB,4BAAI,gCAAQ,uBAAGA,MAAM,mBACrB,4BAAI,gCAAQ,uBAAGA,MAAM,6BACrB,4BAAI,gCAAQ,uBAAGA,MAAM,iC,GAZ3Be,aCkBHE,E,uKAfP,OACI,6BACI,2BAAOlB,UAAU,sBACb,gCAAQ,uBAAGC,MAAM,sBACjB,gCAAQ,uBAAGA,MAAM,sBACjB,gCAAQ,uBAAGA,MAAM,sBACjB,gCAAQ,uBAAGA,MAAM,sBACjB,gCAAQ,uBAAGA,MAAM,mBACjB,gCAAQ,uBAAGA,MAAM,4B,GAVXe,aCeXG,E,uKAdP,OACI,yBAAKnB,UAAU,WACX,uCACA,yBAAKA,UAAU,OACX,4BACI,4BAAI,yBAAKA,UAAU,WAAnB,mBAAkD,uBAAGC,MAAM,wBAC3D,4BAAI,yBAAKD,UAAU,WAAnB,yBAAwD,uBAAGC,MAAM,+B,GARnEe,aCkBPI,E,uKAhBP,OACI,yBAAKpB,UAAU,UACX,oDACA,4BACI,4BAAI,wCACJ,4BAAI,yCACJ,4BAAI,0CACJ,4BAAI,4CACJ,4BAAI,yCACJ,4BAAI,+C,GAXHgB,aCuDNK,G,kGAtCb,aAAe,IAAD,8BACZ,gBACK1B,MAAQ,CACXQ,UAAW,GACXmB,SAAU,GACVb,KAAM,GACNI,MAAO,GACPC,KAAM,KACNC,OAAQ,KARE,E,qDAeZ,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,6BACE,wBAAIf,UAAU,WAAd,0BACA,yBAAKA,UAAU,cACb,wBAAIA,UAAU,WAAU,uBAAGA,UAAU,iBAArC,oBAAyE,uBAAGA,UAAU,uBAExF,yBAAKA,UAAU,eACb,kBAAC,EAAD,MACCuB,QAAQC,IAAItB,GACb,kBAAC,EAAD,OAEF,yBAAKF,UAAU,gBACb,kBAAC,EAAD,a,GA/BMgB,cCNES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASlB,OACP,kBAAC,IAAMmB,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASyB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjB,QAAQiB,MAAMA,EAAMC,c","file":"static/js/main.dc292e29.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport data from \"./data.json\";\nimport ReactApexCharts from \"react-apexcharts\";\n\n\n\n\nclass Cards extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            series: [44, 55, 41, 17, 15],\n            options: {\n                chart: {\n                    type: 'donut',\n                },\n            }\n        }\n    }\n\n\n\n\n    render() {\n        return (\n\n            <div className=\"wrapper\">\n                <ul className=\"cardsSection\">\n                    <div class=\"card\">\n                        {\n                            data.gaugeData.map((cardData) => {\n                                {\n                                    var options = {\n                                        chart: {\n                                            type: 'donut'\n                                        },\n                                        series: [{\n                                            name: 'sales',\n                                            data: [30, 40, 45, 50, 49, 60, 70, 91, 125]\n                                        }],\n                                        xaxis: {\n                                            categories: [1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999]\n                                        }\n                                    }\n\n                                    var chart = new ReactApexCharts(document.querySelector(\"#chart\"), options);\n\n                                    chart.render();\n\n                                }\n                                return (\n                                    <li>\n                                        {cardData.name}\n                                        {cardData.score}\n                                        {cardData.vsly}\n                                        {cardData.sample}\n                                    </li>\n                                )\n                            })\n                        }\n                    </div>\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default Cards; ","import React, { Component } from \"react\";\n\nclass Nav extends Component {\n    render() {\n        return (\n            <div>\n                <nav>\n                    <ul className=\"navFlexContainer\">\n                        <li>Diagnostic Tool</li>\n                        <li>Logged in as General user</li>\n                        <li><button><i class=\"fas fa-sliders-h\"></i></button></li>\n                        <li><button><i class=\"fas fa-download\"></i></button></li>\n                        <li><button><i class=\"fas fa-print\"></i></button></li>\n                        <li><button><i class=\"far fa-question-circle\"></i></button></li>\n                        <li><button><i class=\"fas fa-sign-out-alt\"></i></button></li>\n                    </ul>\n                </nav>\n            </div>\n        );\n    }\n}\n\nexport default Nav; ","import React, { Component } from 'react';\n\n\nclass LeftSideBar extends Component {\n    render() {\n        return (\n            <div>\n                <aside className=\"asideFlexContainer\">\n                    <button><i class=\"fas fa-thumbtack\"></i></button>\n                    <button><i class=\"fas fa-thumbtack\"></i></button>\n                    <button><i class=\"fas fa-chart-bar\"></i></button>\n                    <button><i class=\"fas fa-mail-bulk\"></i></button>\n                    <button><i class=\"fas fa-shapes\"></i></button>\n                    <button><i class=\"fas fa-mail-bulk\"></i></button>\n                </aside>\n            </div>\n        );\n    }\n}\n\nexport default LeftSideBar; ","import React, { Component } from 'react';\n\nclass Filters extends Component {\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <h3>Filters</h3>\n                <div className=\"box\">\n                    <ul>\n                        <li><div className=\"square\"></div>All CQA Results <i class=\"fas fa-info-circle\"></i></li>\n                        <li><div className=\"square\"></div>CQAs with Closed Loop <i class=\"fas fa-info-circle\"></i></li>\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Filters;","import React, { Component } from 'react';\n\nclass Charts extends Component {\n    render() {\n        return (\n            <div className=\"charts\">\n                <h4>quality score trends</h4>\n                <ul>\n                    <li><button>Day</button></li>\n                    <li><button>Week</button></li>\n                    <li><button>Month</button></li>\n                    <li><button>Quarter</button></li>\n                    <li><button>Half</button></li>\n                    <li><button>Year</button></li>\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default Charts;","import React, { Component } from 'react';\nimport data from \"./data.json\";\nimport './App.css';\nimport Cards from \"./Cards\";\nimport Nav from \"./Nav\";\nimport LeftSideBar from \"./LeftSideBar\";\nimport Filters from \"./Filters\";\nimport Charts from \"./Charts\";\nimport './sass/_setup.scss';\nimport './sass/_headerFonts.scss';\nimport './sass/_nav.scss';\nimport './sass/_aside.scss';\nimport './sass/_squares.scss';\nimport './sass/_sections.scss';\nimport './sass/_charts.scss';\nimport './sass/_mediaQueries.scss';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      gaugeData: [],\n      areaData: {},\n      name: \"\",\n      score: 72,\n      vsly: null,\n      sample: 133,\n\n    };\n  }\n\n  render() {\n\n    return (\n      <div>\n        <Nav />\n        <LeftSideBar />\n        <div>\n          <h1 className=\"wrapper\">Performance Management</h1>\n          <div className=\"greySquare\">\n            <h2 className=\"wrapper\"><i className=\"fas fa-globe\"></i> Diagnostic Tool <i className=\"fas fa-thumbtack\"></i></h2>\n          </div>\n          <div className=\"leftSection\">\n            <Filters />\n            {console.log(data)}\n            <Cards />\n          </div>\n          <div className=\"rightSection\">\n            <Charts />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}